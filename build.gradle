buildscript {
    ext.kotlin_version = '1.3.71'
    ext.vertx_version = '3.8.5'
    ext.shadow_version = '5.2.0'
    ext.retry_gradle_tests = '1.1.3'
    ext.slf4j_version = '1.7.30' // Logging in the app
    ext.logback_version = '1.2.3' // Logging to a file, implements SLF4J API, so we can use it with slf4j
    ext.retrofit_version = '2.7.2' // HTTP client
    ext.retrofit_coroutines_version = '1.1.0' // makes retrofit's calls work with coroutines
    ext.kotson_version = '2.5.0' // JSON (w/ Gson) parser
    ext.junit_version = '4.13'
    //https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    ext.apache_http_client_version = '4.5.12'
    ext.hamcrest_all_version = '1.3'
    ext.vertx_unit_version = '3.8.5'
    ext.apache_commons_colections_version = '4.4'

    repositories {
        jcenter()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version",
                "com.github.jengelman.gradle.plugins:shadow:$shadow_version",
                "org.gradle:test-retry-gradle-plugin:$retry_gradle_tests"
    }

}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "org.gradle.test-retry"

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile "com.github.salomonbrys.kotson:kotson:$kotson_version"

    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "ru.gildor.coroutines:kotlin-coroutines-retrofit:$retrofit_coroutines_version"

    compile "io.vertx:vertx-core:$vertx_version"
    compile "io.vertx:vertx-web:$vertx_version"
    compile "io.vertx:vertx-lang-kotlin:$vertx_version"
    compile "io.vertx:vertx-lang-kotlin-coroutines:$vertx_version"

    //  runtime "org.slf4j:slf4j-jdk14:$slf4j_version"
    runtime "ch.qos.logback:logback-classic:$logback_version"
    compile "org.slf4j:slf4j-api:$slf4j_version"
    compile "org.apache.commons:commons-collections4:$apache_commons_colections_version"
    // https://mvnrepository.com/artifact/org.testng/testng
    //testCompile "org.testng:testng:$testng_version"
    testCompile "io.vertx:vertx-unit:$vertx_unit_version"
    testCompile "junit:junit:$junit_version"
    testCompile "org.apache.httpcomponents:httpclient:$apache_http_client_version"
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: "$hamcrest_all_version"
}

// this is made for watching classes to redeploy a verticle
mainClassName = "io.vertx.core.Launcher"
def mainVerticleName = "com.minskrotterdam.airquality.verticles.MainVerticle"
def watchForChange = 'src/**/*.kt'
def doOnChange = 'gradle classes'

run {
    args = ['run', mainVerticleName, "--redeploy=$watchForChange",
            "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnit()
    //scanForTestClasses = false
    testLogging.showStandardStreams = true
    retry {
        maxRetries = 3
        maxFailures = 20
        failOnPassedAfterRetry = false
    }
    reports {
        junitXml.enabled = true
        html.enabled = true
    }

}

// Naming and packaging settings for the "shadow jar".
shadowJar {
    baseName = 'app'
    classifier = 'shadow'

    manifest {
        attributes 'Main-Verticle': mainVerticleName
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}


// Heroku relies on the 'stage' task to deploy.
task stage {
    dependsOn shadowJar
}
